{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","className","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"8NAciBA,EAZJ,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACfC,EAAQF,EAAKG,UACf,qBAAuB,iBAEvB,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCRtCI,EAAU,uDAuBD,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAClBC,GAAI,IACJP,QAAS,mCACTQ,KAAM,2BACNT,WAAW,GAEb,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCiErCK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKC,UAAU,SACZD,IAKDE,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGAKSC,EA7GH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,IAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,MAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KAMrBC,qBAAU,WACRC,IAEG3B,MAAK,SAAA4B,GACJT,EAASS,QAEZ,IAEH,IAyCMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAA3C,GAAI,OAAIA,EAAKG,aAE9B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAckB,QAASgB,IACvB,6BACE,4BAAQhC,QAAS,kBAAM+B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGO,EAAYE,KAAI,SAAC5C,GAAD,OACf,kBAAC,EAAD,CAAM6C,IAAK7C,EAAKW,GAAIX,KAAMA,EAAMC,iBAAkB,kBAxC/B,SAACU,GAC1B,IAAMX,EAAO+B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEpC,KAAOA,KAChCqC,EAAW,2BAAQhD,GAAR,IAAcG,WAAYH,EAAKG,YAEhDqC,EACU7B,EAAIqC,GACXnC,MAAK,SAAAoC,GACJjB,EAASD,EAAMa,KAAI,SAAA5C,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAOiD,SAEtDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJtC,EAAKI,QADD,sCAGfgD,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAEpC,KAAOA,SAwBwB0C,CAAmBrD,EAAKW,WAGpF,0BAAM2C,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBrD,QAAS6B,EACTrB,MAAM,IAAI8C,MAAOC,cACjBxD,UAAWyD,KAAKC,SAAW,IAG7BrB,EACUiB,GACP5C,MAAK,SAAAoC,GACJjB,EAASD,EAAMf,OAAOiC,IACtBf,EAAW,SAgDX,2BAAO4B,MAAO7B,EAAS8B,SAxBJ,SAACR,GACxBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzB5B,EAAWqB,EAAMW,OAAOJ,UAuBpB,4BAAQK,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MC5ENC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7bbc7c2c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\nconst label = note.important\r\n  ? \"make not important\" : \"make important\"\r\n\r\n    return (\r\n      <li>\r\n        {note.content}\r\n        <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n  }\r\n\r\n  export default Note","import axios from 'axios'\r\nconst baseUrl = 'https://mighty-hollows-72545.herokuapp.com/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from \"react\"\r\nimport Note from \"./components/Note\"\r\nimport noteService from \"./services/notes\"\r\n\r\nconst App = (props) => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState(\"\") \r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n  }, [])\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5\r\n    }\r\n  \r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote(\"\")\r\n      })\r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important}\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n    })\r\n    .catch(error => {\r\n      setErrorMessage(\r\n        `Note '${note.content}' was already removed from server`\r\n      )\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n      setNotes(notes.filter(n => n.id !== id))\r\n    })\r\n  }  \r\n\r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value)\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? \"important\" : \"all\"}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note) => (\r\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\r\n        ))}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange}/>\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n\n\n"],"sourceRoot":""}